{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","use","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","dependencies","db","asyncHandler","req","res","next","version","listen","process","env","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA,IAAIA,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;AACAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAJ,IAAII,GAAJ,CAAQ,oBAAK;AACZC,iBAAgBC,iBAAOC;AADX,CAAL,CAAR;;AAIAP,IAAII,GAAJ,CAAQI,qBAAWC,IAAX,CAAgB;AACvBC,QAAQJ,iBAAOK;AADQ,CAAhB,CAAR;;AAIA;AACA,kBAAc,cAAM;;AAEnB,KAAMC,eAAe;AACpBN,0BADoB;AAEpBO,QAFoB;AAGpBC;;AAGD;AANqB,EAArB,CAOAd,IAAII,GAAJ,CAAQ,0BAAWQ,YAAX,CAAR;;AAEA;AACAZ,KAAII,GAAJ,CAAQ,GAAR,EAAa,sBAAOQ,YAAP,CAAb;;AAEA;AACAZ,KAAII,GAAJ,CAAQ,OAAR,EAAiB,UAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpCD,MAAIP,IAAJ,CAAS,EAACS,yBAAD,EAAT;AACA,EAFD;;AAIAlB,KAAIC,MAAJ,CAAWkB,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBhB,iBAAOiB,IAA7C,EAAmD,YAAM;AACxDC,UAAQC,GAAR,sBAA+BzB,IAAIC,MAAJ,CAAWyB,OAAX,GAAqBH,IAApD;AACA,EAFD;AAGA,CAtBD;;kBAwBevB,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport initializeDb from './db';\nimport middleware from './middleware';\nimport events from './routes/events';\nimport config from './config.json';\nimport asyncHandler from 'express-async-handler';\nimport { version } from '../package.json';\n\n\nlet app = express();\napp.server = http.createServer(app);\n\n// logger\napp.use(morgan('dev'));\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: config.corsHeaders\n}));\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit\n}));\n\n// connect to db\ninitializeDb( db => {\n\n\tconst dependencies = {\n\t\tconfig,\n\t\tdb,\n\t\tasyncHandler\n\t}\n\n\t// internal middleware\n\tapp.use(middleware(dependencies));\n\n\t// event router\n\tapp.use('/', events(dependencies));\n\n\t//meta router for app info, current version etc\n\tapp.use('/meta', (req, res, next) => {\n\t\tres.json({version})\n\t})\n\n\tapp.server.listen(process.env.PORT || config.port, () => {\n\t\tconsole.log(`Started on port ${app.server.address().port}`);\n\t});\n});\n\nexport default app;\n"]}